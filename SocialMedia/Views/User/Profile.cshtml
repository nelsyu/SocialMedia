@{
    ViewData["Title"] = "Profile" + @TempData[ParameterKeys.Username2];
}
@using Library.Constants
@using Library.Extensions

<style>
    body {
        background-color: #f8f9fa;
        font-family: 'Lato', sans-serif;
    }

    h2 {
        text-align: center;
        margin: 20px 0;
        color: #007bff;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
        min-height: 400px;
    }

    th, td {
        padding: 15px;
        text-align: left;
        border-bottom: 1px solid #ddd;
        transition: background-color 0.3s ease;
    }

    .username, .title, .content, .post-date {
        width: auto;
        max-width: 150px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .content {
        max-width: 300px;
    }

    .pagination {
        display: flex;
        justify-content: center;
        list-style: none;
        padding: 0;
        margin-bottom: 20px;
    }

    .page-item {
        margin: 0 5px;
    }

    .page-link {
        padding: 8px 16px;
        background-color: #007bff;
        color: #fff;
        border: none;
        cursor: pointer;
        transition: background-color 0.3s ease;
        border-radius: 15px !important;
    }

        .page-item.active .page-link,
        .page-link:hover {
            background-color: #0056b3;
        }

    table tr:hover {
        background-color: rgba(0, 123, 255, 0.1);
    }

    .table th.username {
        width: 10%;
    }

    .table th.title {
        width: 20%;
    }

    .table th.content {
        width: 50%;
    }

    .table th.post-date {
        width: 30%;
    }
</style>
<div id="profile">

    <div class="container">
        @{
            var userId2 = TempData[ParameterKeys.UserId2];

            <h2 v-if="user2 == null">User not found.</h2>
            <h2 v-if="user2 !== null">{{ user2.username }}</h2>
            <template v-if="userLoggedIn !== null && user2 !== null && userLoggedIn.userId !== user2.userId">
                {{ getFriendshipStatus(userLoggedIn.userId, user2.userId) }}
                <button v-if="friendshipStatus == null" v-on:click="addFriend(user2.userId)" class="btn btn-primary add-friend">
                    Add Friend
                </button>
                <div v-else-if="friendshipStatus == 1" style="display: flex; justify-content: space-between;">
                    <button class="btn btn-success">
                        Friend
                    </button>
                    <button v-on:click="rejectFriendRequest(user2.userId)" class="btn btn-danger unfriend">
                        Unfriend
                    </button>
                </div>
                <button v-else-if="friendshipStatus == 2" v-on:click="rejectFriendRequest(user2.userId)" class="btn btn-primary pending">
                    Pending
                </button>
                <div v-else-if="friendshipStatus == 3" style="display: flex; justify-content: space-between;">
                    <button v-on:click="acceptFriendRequest(user2.userId)" class="btn btn-success confirm">
                        Accept
                    </button>
                    <button v-on:click="rejectFriendRequest(user2.userId)" class="btn btn-danger deny">
                        Reject
                    </button>
                </div>
            </template>
        }
    </div>

    <div id="userPosts" class="container">
        <table class="table">
            <thead>
                <tr>
                    <th scope="col" class="username">Username</th>
                    <th scope="col" class="title">Title</th>
                    <th scope="col" class="content">Content</th>
                    <th scope="col" class="post-date">Post Date</th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="post in posts" :key="post.id" v-on:click="goToPostDetail(post.id)" style="cursor:pointer;">
                    <td class="username">{{ post.user ? post.user.username : 'Deleted User' }}</td>
                    <td class="title">{{ post.title }}</td>
                    <td class="content">{{ post.content }}</td>
                    <td class="post-date">{{ new Date(post.createDate).toLocaleString() }}</td>
                </tr>
            </tbody>
        </table>

        <nav>
            <ul class="pagination">
                <li v-for="page in totalPages" :key="page" :class="{ 'page-item': true, 'active': page == currentPage }">
                    <button class="page-link" v-on:click="getPosts(postsType, userId, apiPath, page)">{{ page }}</button>
                </li>
            </ul>
        </nav>
    </div>
</div>

<script src="~/js/signalr/dist/browser/signalr.js"></script>
@section Scripts {
    <script type="module">
        import getUserInfoMixin from '/js/views/user/get-user-info.js';
        import getPostsMixin from '/js/views/post/get-posts.js';

        var groupId = "@userId2";
        var userId2 = @userId2;
        var message = "";

        const appPosts = Vue.createApp({
            mixins: [getUserInfoMixin, getPostsMixin],
            data() {
                return {
                    groupId: '@userId2',
                    userId2: @userId2,
                    message: '',
                    friendshipStatus: null
                };
            },
            mounted() {
                this.getUserLoggedIn();
                this.getUserInfo(userId2);
            },
            methods: {
                addFriend(userId2) {
                    message = `${this.userLoggedIn.username} want to be your friend!`;
                    connection.invoke("DirectMessage", groupId, userId2, message).catch(function (err) {
                        console.error(err.toString());
                    });

                    axios.post('/AddFriend', { userId2: userId2 }, {
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        }
                    })
                        .then(response => {
                            console.log(response.data);
                            window.location.href = '/User/Profile?userId2=' + userId2;
                        })
                        .catch(error => {
                            console.error('There was an error with the Axios request:', error);
                        });
                },
                acceptFriendRequest(userId2) {
                    message = `${this.userLoggedIn.username} and you are friends now!`
                    connection.invoke("DirectMessage", groupId, userId2, message).catch(function (err) {
                        return console.error(err.toString());
                    });

                    axios.post('/AcceptFriendRequest', { userId2: userId2 }, {
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        }
                    })
                        .then(response => {
                            console.log(response.data);
                            window.location.href = '/User/Profile?userId2=' + userId2;
                        })
                        .catch(error => {
                            console.error('There was an error with the Axios request:', error);
                        });
                },
                rejectFriendRequest(userId2) {
                    axios.post('/RejectFriendRequest', { userId2: userId2 }, {
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        }
                    })
                        .then(response => {
                            console.log(response.data);
                            window.location.href = '/User/Profile?userId2=' + userId2;
                        })
                        .catch(error => {
                            console.error('There was an error with the Axios request:', error);
                        });
                },
                getFriendshipStatus(userId, userId2) {
                    axios.get('/GetFriendshipStatus', { params: { userId: userId, userId2: userId2 } })
                        .then(response => {
                            this.friendshipStatus = response.data.friendshipStatus;
                        })
                        .catch(error => {
                            console.error('Error fetching friendshipStatus:', error);
                        });
                }
            },
        });

        const vm = appPosts.mount('#profile');

        vm.postsType = 'user';
        vm.userId = @userId2;
        vm.apiPath = '/GetPosts';
        const page = 1;
        vm.getPosts(vm.postsType, vm.userId, vm.apiPath, page);
    </script>
}