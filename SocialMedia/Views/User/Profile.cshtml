@{
    ViewData["Title"] = "Profile" + @TempData[ParameterKeys.Username2];
}
@using Library.Constants
@using Library.Extensions

<style>
    body {
        background-color: #f8f9fa;
        font-family: 'Lato', sans-serif;
    }

    h2 {
        text-align: center;
        margin: 20px 0;
        color: #007bff;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
        min-height: 400px;
    }

    th, td {
        padding: 15px;
        text-align: left;
        border-bottom: 1px solid #ddd;
        transition: background-color 0.3s ease;
    }

    .username, .title, .content, .post-date {
        width: auto;
        max-width: 150px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .content {
        max-width: 300px;
    }

    .pagination {
        display: flex;
        justify-content: center;
        list-style: none;
        padding: 0;
        margin-bottom: 20px;
    }

    .page-item {
        margin: 0 5px;
    }

    .page-link {
        padding: 8px 16px;
        background-color: #007bff;
        color: #fff;
        border: none;
        cursor: pointer;
        transition: background-color 0.3s ease;
        border-radius: 15px !important;
    }

        .page-item.active .page-link,
        .page-link:hover {
            background-color: #0056b3;
        }

    table tr:hover {
        background-color: rgba(0, 123, 255, 0.1);
    }

    .table th.username {
        width: 10%;
    }

    .table th.title {
        width: 20%;
    }

    .table th.content {
        width: 50%;
    }

    .table th.post-date {
        width: 30%;
    }
</style>

<div class="container">
    <h2>
        @TempData[ParameterKeys.Username2]
    </h2>
    @{
        var friendshipStatus = TempData[ParameterKeys.FriendshipStatus];
        var loggedInUserId = TempData[ParameterKeys.LoggedInUserId];
        var loggedInUsername = TempData[ParameterKeys.LoggedInUsername];
        var userId2 = TempData[ParameterKeys.UserId2];

        if (userId2 != null && (int)userId2 == 0)
        {
            <p>User not found.</p>
        }
        else if (loggedInUserId != null && userId2 != null && (int)loggedInUserId != (int)userId2)
        {
            if (friendshipStatus == null)
            {
                <button type="button" id="button" class="btn btn-primary add-friend" onclick="AddFriend(@userId2)">
                        Add Friend
                    </button>
            }
            else if ((int)friendshipStatus == 1)
            {
                    <div style="display: flex; justify-content: space-between;">
                        <button type="button" id="button" class="btn btn-success">
                            Friend
                        </button>
                        <button type="button" class="btn btn-danger unfriend" onclick="RejectFriendRequest(@userId2);">
                            Unfriend
                        </button>
                    </div>
            }
            else if ((int)friendshipStatus == 2)
            {
                <button type="button" id="button" class="btn btn-primary pending" onclick="RejectFriendRequest(@userId2);">
                    Pending
                </button>
            }
            else if ((int)friendshipStatus == 3)
            {
                    <div style="display: flex; justify-content: space-between;">
                        <button type="button" id="button" class="btn btn-success confirm" onclick="AcceptFriendRequest(@userId2)">
                            Accept
                        </button>
                        <button type="button" class="btn btn-danger deny" onclick="RejectFriendRequest(@userId2);">
                            Reject
                        </button>
                    </div>
            }
        }
    }
</div>

<div id="userPosts">
    <table class="table">
        <thead>
            <tr>
                <th scope="col" class="username">Username</th>
                <th scope="col" class="title">Title</th>
                <th scope="col" class="content">Content</th>
                <th scope="col" class="post-date">Post Date</th>
            </tr>
        </thead>
        <tbody>
            <tr v-for="post in posts" :key="post.id" v-on:click="goToPostDetail(post.id)" style="cursor:pointer;">
                <td class="username">{{ post.user ? post.user.username : 'Deleted User' }}</td>
                <td class="title">{{ post.title }}</td>
                <td class="content">{{ post.content }}</td>
                <td class="post-date">{{ new Date(post.createDate).toLocaleString() }}</td>
            </tr>
        </tbody>
    </table>

    <!-- Pagination Section -->
    <nav>
        <ul class="pagination">
            <li v-for="page in totalPages" :key="page" :class="{ 'page-item': true, 'active': page === currentPage }">
                <button class="page-link" v-on:click="getPosts(postsType, userId, apiPath, page)">{{ page }}</button>
            </li>
        </ul>
    </nav>
</div>

<script src="~/js/signalr/dist/browser/signalr.js"></script>
@section Scripts {
    <script src="~/js/Views/Post/GetPosts.js" asp-append-version="true"></script>
    <script>
        const vm = appGetPosts.mount('#userPosts');

        function externalFunction() {
            vm.postsType = 'user';
            vm.userId = @userId2;
            vm.apiPath = '/GetPosts';
            const page = 1;
            vm.getPosts(vm.postsType, vm.userId, vm.apiPath, page);
        }

        externalFunction();

        var groupId = "@userId2";
        var userId2 = @userId2;
        var message = "";

        function AddFriend(userId2) {
            message = "@loggedInUsername want to be your friend!";
            connection.invoke("DirectMessage", groupId, userId2, message).catch(function (err) {
                console.error(err.toString());
            });

            axios.post('/AddFriend', { userId2: userId2 }, {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                }
            })
                .then(response => {
                    console.log(response.data);
                    window.location.href = '/Profile?userId2=' + userId2;
                })
                .catch(error => {
                    console.error('There was an error with the Axios request:', error);
                });
        }

        function AcceptFriendRequest(userId2) {
            message = "@loggedInUsername and you are friends now!"
            connection.invoke("DirectMessage", groupId, userId2, message).catch(function (err) {
                return console.error(err.toString());
            });

            axios.post('/AcceptFriendRequest', { userId2: userId2 }, {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                }
            })
                .then(response => {
                    console.log(response.data);
                    window.location.href = '/Profile?userId2=' + userId2;
                })
                .catch(error => {
                    console.error('There was an error with the Axios request:', error);
                });
        }

        function RejectFriendRequest(userId2) {
            axios.post('/RejectFriendRequest', { userId2: userId2 }, {
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                }
            })
                .then(response => {
                    console.log(response.data);
                    window.location.href = '/Profile?userId2=' + userId2;
                })
                .catch(error => {
                    console.error('There was an error with the Axios request:', error);
                });
        }
    </script>
}