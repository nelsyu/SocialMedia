@{
    ViewData["Title"] = "Topics";
}
@using Library.Constants

<style>
    .btn-3d {
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        transition: 0.3s;
    }

        .btn-3d:hover {
            box-shadow: 0 16px 32px rgba(0, 0, 0, 0.2);
        }

    .btn {
        border-radius: 15px;
    }
</style>

<div class="container mt-5" id="allTopics">
    <h2 class="text-center text-primary mb-4">Explore Topics</h2>

    <div class="row row-cols-6 row-cols-md-6 row-cols-lg-6 g-2">
        <div v-for="topic in topics" :key="topic.id" :value="topic.id">
            <div class="col mb-3">
                <div class="position-relative">
                    <a class="btn btn-primary btn-lg custom-style w-100 btn-3d btn-rounded" :href="'/Topic/DetailTopic?topicId=' + topic.id">{{ topic.title }}</a>
                    @if ((bool?)ViewData[ParameterKeys.IsAdministrator] ?? false)
                    {
                        <button class="btn btn-danger btn-sm position-absolute top-0 end-0 m-2" data-bs-toggle="modal" :data-bs-target="'#deleteTopicModal-' + topic.id" onclick="event.stopPropagation();">
                            -
                        </button>

                        <div class="modal fade" :id="'deleteTopicModal-' + topic.id" tabindex="-1" :aria-labelledby="'deleteTopicModalLabel-' + topic.id" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="'deleteTopicModalLabel-' + topic.id">Confirm Delete Topic</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <p>Are you sure you want to delete this topic? This action cannot be undone.</p>
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="event.stopPropagation();">
                                            Cancel
                                        </button>
                                        <div class="delete-form">
                                            <button type="button" class="btn btn-danger" data-bs-dismiss="modal" v-on:click="deleteTopic(topic.id)">Delete</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    @if ((bool?)ViewData[ParameterKeys.IsAdministrator] ?? false)
    {
        <div class="mt-4">
            <form id="topicForm" class="needs-validation" novalidate>
                <div class="form-group mb-4">
                    <label for="title" class="form-label h4">Create a New Topic:</label>
                    <input type="text" v-model="title" id="title" name="title" class="form-control input-rounded" placeholder="Share your thoughts..." required>
                </div>

                <button type="button" v-on:click="createTopic(title)" class="btn btn-primary btn-lg btn-3d btn-rounded">Submit</button>
            </form>
        </div>
    }
</div>

@section Scripts {
    <script type="module">
        import getTopicsMixin from '/js/views/topic/get-topics.js';

        const appTopics = Vue.createApp({
            mixins: [getTopicsMixin],
            data() {
                return {
                    title: ''
                };
            },
            methods: {
                createTopic(title) {
                    if (this.title.trim() !== '') {
                        axios.post('/CreateTopic', { title: title }, {
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                            }
                        })
                            .then(response => {
                                console.log(response.data);
                                this.getTopics();
                            })
                            .catch(error => {
                                console.error(error);
                            });
                    } else {
                        alert('Please enter a topic.');
                    }
                },
                deleteTopic(topicId) {
                    axios.post('/Topic/DeleteTopic', { topicId: topicId }, {
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        }
                    })
                        .then(response => {
                            console.log(response.data);
                            if (response.data.deleteSuccessful == false) {
                                alert('This topic contains posts, so it cannot be deleted.');
                            } else {
                                this.getTopics();
                            }
                        })
                        .catch(error => {
                            console.error(error);
                        });
                },
            },
        });

        const vm = appTopics.mount('#allTopics');
        vm.getTopics();
    </script>
}