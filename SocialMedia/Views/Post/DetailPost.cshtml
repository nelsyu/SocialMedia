@{
    ViewData["Title"] = "DetailPost";
}
@using Library.Constants;

<style>
    .card {
        border: none;
        border-radius: 30px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-top: 15px;
    }

    .card-header {
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 15px 15px 15px 15px;
        padding: 15px;
    }

    .card-footer {
        background-color: #dddddd;
        color: #000000;
        border: none;
        border-radius: 15px 15px 15px 15px;
        padding: 15px;
    }

    .card-body, .card-footer, .table td, .table th {
        border: none;
        padding: 15px;
    }

    .table {
        border: none;
        border-radius: 30px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-top: 15px;
    }

        .table thead th {
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 15px 15px 15px 15px;
            padding: 15px;
        }

        .table tbody tr:hover {
            background-color: #f8f9fa;
        }

    .btn {
        border-radius: 15px;
        border: none;
    }

    .btn-primary:hover {
        background-color: #007bff;
    }

    .form-group label {
        font-weight: bold;
        color: #007bff;
    }

    .form-control {
        border: 2px solid #007bff;
        border-radius: 30px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-top: 10px;
    }

    .scrollable-section {
        max-height: 400px;
        overflow-y: auto;
    }

</style>

<div id="detail-post" class="container mt-4">
    <div v-if="postVM">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">{{ postVM.title }}</h5>
            </div>
            <div class="card-body">
                <p class="card-text" style="white-space: pre-line;">{{ postVM.content }}</p>
            </div>
            <div class="card-footer">
                <span class="username">{{ postVM.user ? postVM.user.username : "Deleted User" }}&nbsp;&nbsp;&nbsp;&nbsp;</span>
                <span class="post-date">{{ new Date(postVM.createDate).toLocaleString() }}</span>
                <div class="float-end">
                    <div v-if="userLoggedIn && userLoggedIn.userId === postVM.userId">
                        <a class="btn btn-warning btn-rounded text-white" :href="'/Post/EditPost?postId=' + postVM.id">Edit</a>

                        <button type="button" class="btn btn-danger" data-bs-toggle="modal" :data-bs-target="'#deletePostModal-' + postVM.id" onclick="event.stopPropagation();">
                            Delete
                        </button>

                        <div class="modal fade" :id="'deletePostModal-' + postVM.id" tabindex="-1" :aria-labelledby="'deletePostModalLabel-' + postVM.id" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="'deletePostModalLabel-' + postVM.id">Confirm Delete Post</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <p>Are you sure you want to delete this post? This action cannot be undone.</p>
                                    </div>

                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                                            Cancel
                                        </button>
                                        <button type="submit" class="btn btn-danger" v-on:click="deletePost(postVM.id)">
                                            Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <button type="button" class="btn btn-primary btn-rounded mt-4" data-bs-toggle="modal" data-bs-target="#replyModal">
            Reply
        </button>

        <div class="modal fade" id="replyModal" tabindex="-1" aria-labelledby="replyModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="replyModalLabel">Add Reply</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <form id="replyForm">
                        <div class="modal-body">
                            <input type="hidden" name="PostId" :value="postVM.id" />
                            <div class="form-group">
                                <textarea class="form-control" id="replyContent" name="Content" rows="3" placeholder="Type your reply here..." required></textarea>
                                <div class="invalid-feedback">
                                    Please enter a reply.
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" class="btn btn-primary btn-rounded" data-bs-dismiss="modal" v-on:click="submitReply(postVM.id)">Submit Reply</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div id="all-replies" class="mt-4">
            <h3>Replies</h3>
            <div class="scrollable-section">
                <div v-for="reply in postVM.replies" :key="reply.id" class="card mt-3">
                    <div class="card-header">
                        <span class="username">{{ reply.user ? reply.user.username : "Deleted User" }}</span>
                    </div>
                    <div class="card-body">
                        <p class="card-text">{{ reply.content }}</p>
                    </div>
                    <div class="card-footer">
                        <span class="reply-date">{{ new Date(reply.createDate).toLocaleString() }}</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts{
    <script type="module">
        import getUserInfoMixin from '/js/views/user/get-user-info.js';

        const appDetailPost = Vue.createApp({
            mixins: [getUserInfoMixin],
            data() {
                return {
                    postVM: null
                };
            },
            mounted() {
                this.getUserLoggedIn();
                this.getPost();
            },
            methods: {
                getPost() {
                    axios.get('/GetPost', { params: { postId: @ViewData[ParameterKeys.PostId] } })
                        .then(response => {
                            this.postVM = response.data.postVM;
                            this.postVM.replies.sort((a, b) => new Date(b.createDate) - new Date(a.createDate));
                        })
                        .catch(error => {
                            console.error('Error fetching post:', error);
                        });
                },
                submitReply(postId) {
                    var replyContent = document.getElementById('replyContent').value.trim();

                    if (replyContent !== '') {
                        if (this.userLoggedIn !== null) {
                            var formData = new FormData(document.getElementById('replyForm'));

                            axios.post('/AddReply', formData, {
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded',
                                }
                            })
                                .then(response => {
                                    console.log(response);
                                    this.getPost();
                                    document.getElementById('replyContent').value = '';
                                })
                                .catch(error => {
                                    console.error(error);
                                });
                        } else {
                            window.location.href = '/User/Login';
                        }
                    } else {
                        alert('Please enter a reply.');
                    }
                },
                deletePost(postId) {
                    axios.post('/DeletePost', { postId: postId }, {
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        }
                    })
                        .then(response => {
                            console.log(response.data);
                            window.location.href = '/Post/MyPost';
                        })
                        .catch(error => {
                            console.error('There was an error with the Axios request:', error);
                        });
                },
            },
        });

        const vm = appDetailPost.mount('#detail-post');
    </script>
}